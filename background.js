import API_KEY from "./config.js";
chrome.runtime.onInstalled.addListener(() => {
  chrome.contextMenus.create({
    id: "sendToChatGPT",
    title: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ ChatGPT",
    contexts: ["selection"],
  });
});

chrome.contextMenus.onClicked.addListener(async (info, tab) => {
  if (info.menuItemId === "sendToChatGPT") {
    const selectedText = info.selectionText;
    if (selectedText) {
      try {
        const apiKey = API_KEY; // üî• –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π API-–∫–ª—é—á

        const response = await fetch("https://api.openai.com/v1/chat/completions", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "Authorization": `Bearer ${apiKey}`,
          },
          body: JSON.stringify({
            model: "gpt-3.5-turbo",
            messages: [
              { role: "system", content: "–î–∞–π —Ç–æ–ª—å–∫–æ –∫–æ–Ω–µ—á–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π –æ—Ç–≤–µ—Ç. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º—É–ª—ã, —Å—Ç–µ–ø–µ–Ω–∏ –∏–ª–∏ —Å–∏–º–≤–æ–ª—ã –≤—Ä–æ–¥–µ √ó, ^ –∏–ª–∏ 10^." },
              { role: "user", content: selectedText }
            ],
            max_tokens: 10,
            temperature: 0.1
          }),
        });

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${response.status} - ${errorData.error.message}`);
        }

        const data = await response.json();
        console.log("–û—Ç–≤–µ—Ç –æ—Ç OpenAI API:", data);

        const reply = data.choices?.[0]?.message?.content?.trim() || "–û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω";

        chrome.scripting.executeScript({
          target: { tabId: tab.id },
          func: showAlert,
          args: [reply],
        });
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI:", error);
        chrome.scripting.executeScript({
          target: { tabId: tab.id },
          func: showAlert,
          args: [`–û—à–∏–±–∫–∞: ${error.message}`],
        });
      }
    }
  }
});

function showAlert(message) {
  alert("–û—Ç–≤–µ—Ç –ò–ò: " + message);
}
